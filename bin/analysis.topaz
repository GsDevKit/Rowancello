#!/usr/bin/env superdoit_topaz
#
# Run as DataCurator or any non-SystemUser user
#



logout

login

# break RowancelloPackageSpec >> explicitLoadUsing:

# THIS dog has the specs (self specs) that from the BaselineOf 
# .. so all of the metadata I am looking for is here!
#break MetacelloMCVersion >> executeLoadFromArray:
#break MetacelloBaselineConstructor >> executeLoadFromArray:

#break MetacelloAbstractVersionConstructor >> projectForVersion:copyFrom:with:
#break MetacelloAbstractVersionConstructor >> projectForVersion:overrides:
#break MetacelloAbstractVersionConstructor >> removeProjectForVersion:
#break MetacelloAbstractVersionConstructor >> setBaseline:
#break MetacelloAbstractVersionConstructor >> setConfiguration:withBlock:
#break MetacelloAbstractVersionConstructor >> setProject:withBlock:
#break MetacelloAbstractVersionConstructor >> setProject:withString:
#break MetacelloMCProjectSpec >> packageFileSpecFor:
# break MetacelloProject >> projectReferenceSpec
#break RowancelloBaselineConstructor >> repositoryForSpec:

#break RowancelloBaselineConstructor >> with:attributes:during:


#break MetacelloVersionSpec >> project:copyFrom:with:constructor:
#break RowancelloScriptEngine >> createRowanProjectFrom: @4

#break MetacelloProjectSpec >> addToMetacelloPackages:
#break MetacelloAbstractPackageSpec >> addToMetacelloPackages:
#
#break RowancelloBaselineConstructor >> with:attributes:during: @6
#break RowancelloBaselineConstructor >> package: @3
#break RowancelloBaselineConstructor >> package:with: @3
#break RowancelloBaselineConstructor >> requires: @3
#break RowancelloBaselineConstructor >> configuration:with: @3
#
#break RowancelloVersionConstructor >> package: @3
#break RowancelloVersionConstructor >> package:with: @3
#break RowancelloVersionConstructor >> requires: @3
#break RowancelloVersionConstructor >> configuration:with: @3
#
#break RowancelloMCBaselineProject >> versionSpecClass
#break MetacelloMCBaselineProject >> versionSpecClass
#break MetacelloProject >> versionSpecClass
#
#break RowancelloScriptEngine >> fetchRecord:required: @5
#break RowancelloScriptEngine >> rowanProject: @7
#break RowancelloScriptEngine >> getBaselineUnconditionalLoad: 

# this is where an attribute is plucked from the list and used to get the
# correct block from the blocklist
#break RowancelloBaselineConstructor >> with:attributes:during: @5
#break RowancelloBaselineConstructor >> with:attributes:during: @8

# need to set currentAttributeList
#break RowancelloVersionConstructor >> baseline:with:
#break RowancelloVersionConstructor >> package:with:
#break RowancelloVersionConstructor >> group:with:
#information
#break RowancelloVersionConstructor >> requires:
#break RowancelloVersionConstructor >> file:
#break RowancelloVersionConstructor >> postLoadDoIt:

#break RowancelloPackageSpec >> explicitLoadUsing:

#break RowancelloGroupSpec >> currentAttributeList:
#break RowancelloPackageSpec >> currentAttributeList:
#break RowancelloProjectReferenceSpec >> currentAttributeList:
#
#break RowancelloVersionConstructor >> project:copyFrom:with:

#break RowancelloVersionConstructor >> calculate:project: @16
#break RowancelloVersionConstructor >> setFor:do: @11

#break OldRowancelloBaselineConstructor >> setFor:do: @11

# break ConfigurationOf>>project

#break RowancelloScriptEngine >> createRowanProjectFrom:

# break ConfigurationOf >> project

#break MetacelloScriptEngine >> getBaselineProjectUnconditionalLoad: @3
#break RowancelloVersionConstructor >> projectForVersion:copyFrom:with: @6

#break BaselineOfGLASS1 >> baseline: @1
#break BaselineOfGLASS1 >> baseline: @88

#break MetacelloSpec >> copyMember

# break RowancelloMCBaselineProject >> projectSpecClass
#not called?
#break MetacelloMCNamelessProjectSpec >> asProjectSpecForVersion:
#break MetacelloMemberListSpec >> map @5

#break OldRowancelloBaselineConstructor >> project:copyFrom:with:

#break RowancelloScriptEngine >> rowanProject: @7

# RowancellScriptEngine >> createRowanProjectFrom: @11

#break OldRowancelloBaselineConstructor>>configuration:with:
#break OldRowancelloBaselineConstructor>>baseline:with:
#break OldRowancelloBaselineConstructor>>package:
#break OldRowancelloBaselineConstructor>>package:with:
#break OldRowancelloBaselineConstructor>>group:with:
#
#break MetacelloAbstractVersionConstructor>>configuration:with:
#break MetacelloAbstractVersionConstructor>>project:copyFrom:with:
#break MetacelloAbstractVersionConstructor>>baseline:with:
#break MetacelloAbstractVersionConstructor>>package:
#break MetacelloAbstractVersionConstructor>>package:with:
#break MetacelloAbstractVersionConstructor>>group:with:
#
#break MetacelloVersionSpec >> configuration:with:constructor:
#break MetacelloAbstractVersionConstructor >> configurationForVersion:with:
#
#break RowancelloBaselineConstructor >> setConfiguration:withBlock:

#break RowancelloBaselineConstructor >> projectForVersion:copyFrom:with:

##
#break RowancelloBaselineConstructor >> repositoryForProject:
#break RowancelloBaselineConstructor >> repository:

#break MetacelloVersionSpec >> package:constructor:
#break RowancelloBaselineConstructor >> package:

#break MetacelloVersionSpec >> repository:constructor:
#break RowancelloBaselineConstructor >> repository:

#break RowancelloBaselineConstructor >> repositoryForProject:
#break RowancelloBaselineConstructor >> repositoryForSpec:
#break RowancelloMCConfigurationOfProjectSpec >> repository:constructor:



#break RowancelloVersionConstructor >> calculate:project: @23

#break MetacelloProjectSpec >> versionString: 
#break MetacelloProjectReferenceSpec >> versionString: 
#break MetacelloProjectSpec >> versionString: 
#break MetacelloGenericProjectSpec >> repository:
#break RowancelloVersionConstructor >> versionString:
#break RowancelloVersionConstructor >> repository:
#break MetacelloPackageSpec >> repository:

#break RowancelloBaselineConstructor >> repository:
#break MetacelloAbstractVersionConstructor >> versionString:

#break RowancelloBaselineConstructor >> repository:

#break MetacelloAbstractVersionConstructor >> with:during:
#break RowancelloBaselineConstructor >> projectForVersion:copyFrom:with:
#break OldRowancelloBaselineConstructor>>baseline:with:
#break OldRowancelloBaselineConstructor>>configuration:with:

#break MetacelloAbstractVersionConstructor>>root:
#break RowancelloVersionConstructor>>root:
#break RowancelloBaselineConstructor >> commonVersionSpec:

#break RowancelloScriptEngine >> createRowanProjectFrom: @155

# break RowancelloRepositoriesSpec >> map @24
#bre RowancelloScriptEngine>>fetchRecord:required: @9
#bre MetacelloScriptEngine>>fetchRecord:required:  @17

## not expected
break MetacelloVersionConstructor>>prepareForMethodUpdate:sourceVersion:forceUpdate:generating:
break MetacelloAbstractVersionConstructor>>with:during:
break MetacelloScriptEngine>>get
break MetacelloScriptEngine>>list
break MetacelloScriptEngine>>load:onProjectDownGrade:onProjectUpgrade:
break MetacelloScriptEngine>>lock
break MetacelloScriptEngine>>register
break MetacelloScriptEngine>>unlock
break MetacelloScriptEngine>>unregister
break RowancelloVersionConstructor>>with:during:

run
"
Metacello new 
		repository: 'filetree:///home/dhenrich/_homes/rogue/_home/shared/repos/glass/repository';
		baseline: 'GLASS1';
		record
"

| summary metacello_rowan metacello seaside_rowan seaside rb_rowan rb zodiac zodiac_rowan glass glass_rowan magritte test1 test2 |

magritte := false.	"additional work needed"

summary := test2 := test1 := glass := zodiac := rb := seaside := metacello := false.

summary := test2 := test1 := glass_rowan := zodiac_rowan := rb_rowan := seaside_rowan := metacello_rowan := false.

false ifTrue: [ glass_rowan := true ].
false ifTrue: [ zodiac_rowan := true ].
false ifTrue: [ rb_rowan := true ].
false ifTrue: [ seaside_rowan := true ].
false ifTrue: [ test1 := true ].
false ifTrue: [ test2 := true ].
false ifTrue: [ metacello_rowan := true ].
true ifTrue: [ summary := true ].

true ifTrue: [ summary := test2 := test1 := glass := zodiac := rb := seaside := metacello := true ].
true ifTrue: [ summary := test2 := glass_rowan := zodiac_rowan := rb_rowan := seaside_rowan := metacello_rowan := true ].

false
	ifTrue: [
		"ProjectReferences -- > unimplemented functionality ... triggered by recent includes/references work????"
		rb := glass := seaside := metacello := metacello_rowan := seaside_rowan := rb_rowan := glass_rowan := false ]. 

 metacello ifTrue: [
	Rowancello new 
		repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/src';
		baseline: 'Metacello';
		rowanProject: { 'default' }
].
 seaside ifTrue: [
		Rowancello new 
			repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/src';
			baseline: 'Seaside3';
			rowanProject: { 'default' }
	].
 rb ifTrue: [
			Rowancello new 
				repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/src';
				baseline: 'RB';
				rowanProject: { 'AST-Core' }
			].
 zodiac ifTrue: [
					Rowancello new 
						repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/src';
						baseline: 'Zodiac';
						rowanProject: { 'Core' } 
				].
 glass ifTrue: [ 
					Rowancello new 
						repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/src';
						baseline: 'GLASS1';
						rowanProject: { 'Base' . 'Announcements' }
	].
 magritte ifTrue: [ 
					Rowancello new 
						repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/src';
						baseline: 'Magritte';
						rowanProject: { 'default' }
	].
 glass_rowan ifTrue: [ 
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfGLASS1.ston'
					toFile: 'BaselineOfGLASS1_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/generated'
	].
 rb_rowan ifTrue: [ 
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfRB.ston'
					toFile: 'BaselineOfRB_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/generated'
	].
 zodiac_rowan ifTrue: [ 
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfZodiac.ston'
					toFile: 'BaselineOfZodiac_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/generated'
	].
 seaside_rowan ifTrue: [ 
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfSeaside3.ston'
					toFile: 'BaselineOfSeaside3_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/generated'
	].
 metacello_rowan ifTrue: [
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfMetacello.ston'
					toFile: 'BaselineOfMetacello_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/generated'
].
 test1  ifTrue: [ 
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfTest1.ston'
					toFile: 'BaselineOfTest1_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/tests'
	].
 test2  ifTrue: [ 
			RowancelloProject 
				createRowancelloProjectFrom: 'BaselineOfTest2.ston'
					toFile: 'BaselineOfTest2_rowan'
					repository: '/bosch1/users/dhenrich/_stones/git/Rowancello/tests'
	].

summary 
	ifTrue: [
		"NOTE this block returns with results directory and nothing exlse is executed"
		"generate a Summary_rowan.ston file, containing list of packages resolved 
     for the given cluster and platformContext for each enabled project"
		| resolutionContext url baseUrl block results ans clusters testUrl |
		results := Dictionary new.
		block := [:theUrl :clusters |
			((RowancelloProject 
				fromUrl: theUrl )
					resolvePackageNamesInSubclusters: clusters using: resolutionContext) asArray ].
		resolutionContext := RowancelloProject platformContext.
		baseUrl := 'file:/bosch1/users/dhenrich/_stones/git/Rowancello/generated/'.
		testUrl := 'file:/bosch1/users/dhenrich/_stones/git/Rowancello/tests/'.

		true
			ifTrue: [ 
				test1 := test2 := glass := zodiac := rb := seaside := metacello := true ]
			ifFalse: [
				test1 := test2 := glass := zodiac := rb := seaside := metacello := false ].

		false ifTrue: [ glass := true ].
		false ifTrue: [ zodiac := true ].
		false ifTrue: [ rb := true ].
		false ifTrue: [ seaside := true ].
		false ifTrue: [ metacello := true ].
		false ifTrue: [ test1 := true ]. "no code for test1 yet"
		false ifTrue: [ test2 := true ].

false
	ifTrue: [
		"ProjectReferences -- > unimplemented functionality ... triggered by recent includes/references work????"
		rb := glass := seaside := metacello := false ].

		glass ifTrue: [ 
			url := baseUrl, 'BaselineOfGLASS1_rowan.ston'.
			clusters := {'Base'. 'Announcements'}.
		  ans := block value: url value: clusters.
			results at: 'GLASS1' put: (clusters -> ans) ].
		rb ifTrue: [ 
			url := baseUrl, 'BaselineOfRB_rowan.ston'.
			clusters := {'AST-Core'}.
			ans := block value: url value: clusters.
			results at: 'RB_rowan' put: (clusters -> ans) ].
		zodiac ifTrue: [ 
			url := baseUrl, 'BaselineOfZodiac_rowan.ston'.
			clusters := {'Core'}.
			ans := block value: url value: clusters.
			results at: 'Zodiac_rowan' put: (clusters -> ans) ].
 		metacello ifTrue: [ 
			url := baseUrl, 'BaselineOfMetacello_rowan.ston'.
			clusters := { 'default' }.
			ans := block value: url value: clusters.
			results at: 'Metacello_rowan' put: (clusters -> ans) ].
		seaside ifTrue: [ 
			url := baseUrl, 'BaselineOfSeaside3_rowan.ston'.
			clusters := { 'default'}.
			ans := block value: url value: clusters.
			results at: 'Seaside_rowan' put: (clusters -> ans) ].
		test2 ifTrue: [ 
			url := testUrl, 'BaselineOfTest2_rowan.ston'.
			clusters := {'default'}.
			ans := block value: url value: clusters.
			results at: 'Test2_rowan' put: (clusters -> ans) ].

		RowancelloProject writeObjectToDisk: results filename: '/bosch1/users/dhenrich/_stones/git/Rowancello/generated/Summary_rowan'.
		^ results 
	].

%
